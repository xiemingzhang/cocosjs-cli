var Layer01 = cc.Layer.extend({
  size: cc.director.getVisibleSize(),
  currentCar: null,
  ctor: function () {
    this.count = 0
    this._super()
    this.convert = 1
    this.h = fix === 1 ? 0 : 20
    var size = cc.director.getWinSize()
    this.init()
  },
  init: function () {
    sound.game_info()
    this.dragArr = []
    this.num = 0
    this.lineArr = []
    this.agreeMove = 'on'
    this.frameNum = 0
    this.self = this
    this.currentdirection = null
    var sprArr = spxy[this.count]
    var spBox = new LayerExp()
    this.spBox = spBox
    var spriteArr = spBox.sprites(sprArr)
    for (var i = 0; i < spriteArr.length; i++) {
      this.addChild(spriteArr[i], spriteArr[i].zindex, spriteArr[i].id)
      if (spriteArr[i].id > 1001) {
        this.dragArr.push(spriteArr[i])
      }
    }
    id1001 = this.getChildByTag(1001)
    // this.block = new cc.LayerColor(cc.color(255, 255, 255), 10, 10)
    // this.block.setPosition(120, 270)
    // this.block.setAnchorPoint(0.5, 0.5)
    // this.block.id = 1001
    // this.addChild(this.block, 10, 1001)
    this.getPath()
    // this.drawPath()
    this.dragAction()
  },
  update: function() {
    var id1001 = this.getChildByTag(1001)
    this.gameOver()
    var self = this
    var status = this.pointArr.every(function (v) {
      return cc.pDistance(cc.p((v.x + 140 * fix), (v.y + (30 + self.h) * fix)), cc.p(id1001.x, id1001.y)) > 5 * fix
    })
    if (status) {
      switch (this.currentdirection) {
        case 'up': {
          id1001.setPosition(id1001.x, id1001.y + 1)
          break
        }
        case 'down': {
          id1001.setPosition(id1001.x, id1001.y - 1)

          break
        }
        case 'left': {
          id1001.setPosition(id1001.x - 1, id1001.y)

          break
        }
        case 'right': {
          id1001.setPosition(id1001.x + 1, id1001.y)

        }
      }
    } else {
      var p = this.pointArr.filter(function(v) {
        return cc.pDistance(cc.p((v.x + 140 * fix), (v.y + 30 * fix + self.h * fix)), cc.p(id1001.x, id1001.y)) < 5 * fix
      })
      // for (var j = 0; j < 1000; j++) {
      // 	var block = new cc.LayerColor(cc.color(255, 255, 255), 2, 2)
      // 	block.setAnchorPoint(0.5, 0.5)
      // 	block.id = 1001
      // 	block.setPosition((this.pointArr[j].x + 140 * fix), (this.pointArr[j].y + 30 * fix + this.h * fix))
      //
      // 	this.addChild(block, 11)
      // }

      switch (this.currentdirection) {
        case 'up': {
          id1001.setPosition(id1001.x, parseInt(id1001.y) - 7)
          break
        }
        case 'down': {
          id1001.setPosition(id1001.x, parseInt(id1001.y) + 7)

          break
        }
        case 'left': {
          id1001.setPosition(parseInt(id1001.x) + 7, id1001.y)

          break
        }
        case 'right': {
          id1001.setPosition(parseInt(id1001.x) - 7, id1001.y)

        }
      }
      this.currentdirection = null
    }

  },
  gameOver: function() {
    var id1001 = this.getChildByTag(1001)
    var star = cc.director.getRunningScene().getChildByTag(50)
    if (id1001.x > 650 * fix) {
      this.unscheduleUpdate()
      sound.starAudio()
      star.rightStar(1)
      this.unscheduleUpdate()
      this.scheduleOnce(function() {
        star.gameEnd(1)
        sound.winAudio()
      }, 2)
    }
  },
  getPath: function () {
    this.pointArr = []
    this.linkArr = []
    var totalLen = Snap.path.getTotalLength('M241,981.109c-68.677,0.003-180.027,14.535-210-26\n' +
			'\tc-16.417-22.201-9.256-103.172-9-142c34.699,0.241,120.233,7.396,140-7c4.244-17.621,2-44.045,2-65c0-42.663,0-85.338,0-128\n' +
			'\tc39.329,0,78.67,0,118,0c0.333,64.327,0.667,128.673,1,193c5.678,12.74,18.91,8.128,27,2c4.243-17.621,2-44.045,2-65\n' +
			'\tc0-43.329,0-86.671,0-130c34.663,0,69.337,0,104,0c0.333,64.327,0.667,128.673,1,193c5.678,12.74,18.91,8.128,27,2\n' +
			'\tc7.078-29.091,2.212-72.123,2-105c34.976,0.24,122.092,7.496,142-7c5.686-23.252,2.211-58.167,2-85c74.992,0,150.008,0,225,0\n' +
			'\tc29.733,0.008,86.776,7.433,60-28c-20.2-4.897-50.357-2-74-2c-51.995,0-104.005,0-156,0c-27.033,0-66.918-4.676-83,7\n' +
			'\tc-5.686,23.252-2.211,58.167-2,85c-37.996,0-76.004,0-114,0c0.295-27.789,5.135-71.46-7-88c-24.012-5.763-59.413-2-87-2\n' +
			'\tc-62.66,0-125.34,0-188,0c0-26.664,0-53.336,0-80c35.528,0.237,125.812,7.694,146-7c4.106-17.045,2-42.645,2-63\n' +
			'\tc0-41.996,0-84.004,0-126c61.994,0,124.006,0,186,0c25.664,0,60.926,3.911,76-7c4.243-17.621,2-44.045,2-65c0-43.329,0-86.671,0-130\n' +
			'\tc36.663,0,73.337,0,110,0c0,77.992,0,156.008,0,234c-0.008,29.965-8.04,90.229,28,63c6.103-25,2.211-62.356,2-91\n' +
			'\tc39.996,0,80.004,0,120,0c0,56.661,0,113.339,0,170c-82.658,0-165.342,0-248,0c0.984-32.282,9.706-117.905-28-89\n' +
			'\tc-5.964,24.417-2.211,60.96-2,89c-36.663,0-73.337,0-110,0c0.952-32.73,10.373-124.344-28-95c-5.891,23.652-5.677,108.517,5,123\n' +
			'\tc30.126,7.263,74.074,2,108,2c72.326,0,144.674,0,217,0c33.165,0,93.271,8.005,114-7c3.599-14.732,2-37.051,2-55\n' +
			'\tc0-34.997,0-70.003,0-105c0-22.62,2.351-48.175-7-61c-37.303-9.023-100.715-2.203-143-2c0-58.661,0-117.339,0-176\n' +
			'\tc79.992,0,160.008,0,240,0c30.12,0.008,92.512,8.417,65-28c-32.475-7.821-79.646-2-116-2c-78.326,0-156.675,0-235,0\n' +
			'\tc-32.561,0-103.111-6.667-122,7c-4.244,17.621-2,44.045-2,65c0,43.329,0,86.671,0,130c-125.987,0-252.013,0-378,0\n' +
			'\tc-0.333-62.327-0.667-124.673-1-187c-5.677-12.738-18.911-8.13-27-2c-9.273,37.94-2,112.9-2,157c0,22.416-2.247,47.322,7,60\n' +
			'\tc35.727,8.648,96.404,2.203,137,2c0,23.331,0,46.669,0,70c-35.663,0-71.337,0-107,0c-11.894-0.001-33.873-3.132-42,2\n' +
			'\tc-10.884,6.873-5.592,18.563,0,26c36.033,8.71,107.092,2.193,149,2c0,21.998,0,44.002,0,66c-35.528-0.237-125.813-7.694-146,7\n' +
			'\tc-6.74,28.105-2,69.174-2,101c0,67.327,0,134.673,0,202c-44.662,0-89.338,0-134,0c0-9.774-183.712,79.445-183.712,69.668\n' +
			'\tc0-13,0-321.484,0-334.483C-183.712,509.068,0,696.333,0,687.109c7.333,0,14.667,0,22,0c0-164.65,0-329.35,0-494\n' +
			'\tc-0.003-59.117-12.152-149.501,22-176c25.18-19.537,74.324-17.004,119-17c84.991,0,170.008,0,255,0c0,58.328,0,116.672,0,175\n' +
			'\tc-39.33,0-78.671,0-118,0c0.995-32.138,9.456-115.739-28-87c-5.753,23.034-5.488,100.797,5,115c27.073,6.665,153.103,6.642,169-5\n' +
			'\tc4.312-17.909,2-44.745,2-66c0-43.996,0-88.004,0-132c227.977,0.333,456.022,0.667,684,1c0,58.661,0,117.339,0,176\n' +
			'\tc-82.992,0-166.009,0-249,0c-30.905-0.008-94.499-7.082-68,28c15.038,3.631,37.737,2,56,2c34.996,0,70.003,0,105,0\n' +
			'\tc0,95.99,0,192.01,0,288c0,32.795-7.776,91.54,7,112c24.012,5.763,59.413,2,87,2c61.993,0,124.006,0,186,0c0,22.665,0,45.335,0,68\n' +
			'\tc-34.422-0.243-118.375-7.296-138,7c-4.244,17.621-2,44.045-2,65c0,43.329,0,86.671,0,130c-39.996,0-80.004,0-120,0\n' +
			'\tc0.283-30.938,6.845-85.073-7-104c-34.371-8.846-85.556-1.996-124-2c-12.321-0.001-35.53-3.347-44,2\n' +
			'\tc-10.878,6.867-5.601,18.569,0,26c37.827,9.148,102.151,2.203,145,2c-0.283,30.938-6.845,85.073,7,104\n' +
			'\tc27.218,6.698,155.047,6.681,171-5c4.243-17.621,2-44.045,2-65c0-43.329,0-86.671,0-130c34.421,0.243,118.374,7.296,138-7\n' +
			'\tc5.822-23.344,5.583-104.655-5-119c-24.012-5.763-59.413-2-87-2c-61.994,0-124.007,0-186,0c0-123.988,0-248.012,0-372\n' +
			'\tc77.992,0,156.008,0,234,0c29.965,0.008,90.229,8.04,63-28c-36.777-8.898-99.278-2.203-141-2c0-58.661,0-117.339,0-176\n' +
			'\tc27.997,0,56.003,0,84,0c-0.984,32.282-9.707,117.905,28,89c5.964-24.417,2.211-60.96,2-89c47.974-0.349,95.464-2.857,114,26\n' +
			'\tc9.997,15.563,6,50.413,6,75c0,58.994,0,118.006,0,177c-68.993,0-138.007,0-207,0c-27.058,0-66.885-4.656-83,7\n' +
			'\tc-9.329,38.176-2,113.638-2,158c0,22.619-2.352,48.176,7,61c35.759,8.771,96.332,2,137,2c21.175,0,42.206,1.619,54-7\n' +
			'\tc3.358-12.645,6.11-98.307,0-108c-6.83-10.834-18.606-5.668-26,0c-5.686,23.252-2.211,58.167-2,85c-46.662,0-93.338,0-140,0\n' +
			'\tc0-55.994,0-112.006,0-168c94.99-0.333,190.01-0.667,285-1c0,6.064,195.698-115.364,195.698-109.299c0,17.513,0,328.969,0,346.482\n' +
			'\tc0,8.755-195.698-148.938-195.698-140.184c-7.666,0-15.334,0-23,0c0,162.65,0,325.35,0,488c-37.996,0-76.004,0-114,0\n' +
			'\tc0.867-33.857,13.258-144.334-28-113c-6.197,25.014-6.076,125.93,5,141c35.727,8.648,96.404,2.203,137,2\n' +
			'\tc0.943,73.023-65.659,58.006-137,58c-130.987,0-262.013,0-393,0c0.284-30.545,6.63-83.373-7-102c-38.353-9.272-103.588-2.203-147-2\n' +
			'\tc0-55.328,0-110.672,0-166c74.992,0,150.008,0,225,0c29.733,0.008,86.776,7.433,60-28c-20.2-4.897-50.357-2-74-2\n' +
			'\tc-51.995,0-104.005,0-156,0c-27.033,0-66.918-4.676-83,7c-6.242,25.583-2.212,63.752-2,93c-34.976-0.24-122.093-7.496-142,7\n' +
			'\tc-6.103,25-2.212,62.356-2,91c-106.656,0-213.344,0-320,0c-32.261-0.007-117.986-10.397-89,28c29.833,7.193,73.377,2,107,2\n' +
			'\tc72.326,0,144.674,0,217,0c32.968,0,92.422,7.897,113-7c6.103-25,2.211-62.356,2-91c37.996,0,76.004,0,114,0\n' +
			'\tc-0.291,28.971-5.775,76.567,7,94c38.353,9.272,103.588,2.203,147,2c0,24.664,0,49.336,0,74\n' +
			'\tC637.687,981.109,439.313,981.109,241,981.109z')
    console.log(totalLen)
    var pathLen = 0
    for (var j = 0; j < 25000; j++) {
      var preMove = Snap.path.getPointAtLength('M241,981.109c-68.677,0.003-180.027,14.535-210-26\n' +
				'\tc-16.417-22.201-9.256-103.172-9-142c34.699,0.241,120.233,7.396,140-7c4.244-17.621,2-44.045,2-65c0-42.663,0-85.338,0-128\n' +
				'\tc39.329,0,78.67,0,118,0c0.333,64.327,0.667,128.673,1,193c5.678,12.74,18.91,8.128,27,2c4.243-17.621,2-44.045,2-65\n' +
				'\tc0-43.329,0-86.671,0-130c34.663,0,69.337,0,104,0c0.333,64.327,0.667,128.673,1,193c5.678,12.74,18.91,8.128,27,2\n' +
				'\tc7.078-29.091,2.212-72.123,2-105c34.976,0.24,122.092,7.496,142-7c5.686-23.252,2.211-58.167,2-85c74.992,0,150.008,0,225,0\n' +
				'\tc29.733,0.008,86.776,7.433,60-28c-20.2-4.897-50.357-2-74-2c-51.995,0-104.005,0-156,0c-27.033,0-66.918-4.676-83,7\n' +
				'\tc-5.686,23.252-2.211,58.167-2,85c-37.996,0-76.004,0-114,0c0.295-27.789,5.135-71.46-7-88c-24.012-5.763-59.413-2-87-2\n' +
				'\tc-62.66,0-125.34,0-188,0c0-26.664,0-53.336,0-80c35.528,0.237,125.812,7.694,146-7c4.106-17.045,2-42.645,2-63\n' +
				'\tc0-41.996,0-84.004,0-126c61.994,0,124.006,0,186,0c25.664,0,60.926,3.911,76-7c4.243-17.621,2-44.045,2-65c0-43.329,0-86.671,0-130\n' +
				'\tc36.663,0,73.337,0,110,0c0,77.992,0,156.008,0,234c-0.008,29.965-8.04,90.229,28,63c6.103-25,2.211-62.356,2-91\n' +
				'\tc39.996,0,80.004,0,120,0c0,56.661,0,113.339,0,170c-82.658,0-165.342,0-248,0c0.984-32.282,9.706-117.905-28-89\n' +
				'\tc-5.964,24.417-2.211,60.96-2,89c-36.663,0-73.337,0-110,0c0.952-32.73,10.373-124.344-28-95c-5.891,23.652-5.677,108.517,5,123\n' +
				'\tc30.126,7.263,74.074,2,108,2c72.326,0,144.674,0,217,0c33.165,0,93.271,8.005,114-7c3.599-14.732,2-37.051,2-55\n' +
				'\tc0-34.997,0-70.003,0-105c0-22.62,2.351-48.175-7-61c-37.303-9.023-100.715-2.203-143-2c0-58.661,0-117.339,0-176\n' +
				'\tc79.992,0,160.008,0,240,0c30.12,0.008,92.512,8.417,65-28c-32.475-7.821-79.646-2-116-2c-78.326,0-156.675,0-235,0\n' +
				'\tc-32.561,0-103.111-6.667-122,7c-4.244,17.621-2,44.045-2,65c0,43.329,0,86.671,0,130c-125.987,0-252.013,0-378,0\n' +
				'\tc-0.333-62.327-0.667-124.673-1-187c-5.677-12.738-18.911-8.13-27-2c-9.273,37.94-2,112.9-2,157c0,22.416-2.247,47.322,7,60\n' +
				'\tc35.727,8.648,96.404,2.203,137,2c0,23.331,0,46.669,0,70c-35.663,0-71.337,0-107,0c-11.894-0.001-33.873-3.132-42,2\n' +
				'\tc-10.884,6.873-5.592,18.563,0,26c36.033,8.71,107.092,2.193,149,2c0,21.998,0,44.002,0,66c-35.528-0.237-125.813-7.694-146,7\n' +
				'\tc-6.74,28.105-2,69.174-2,101c0,67.327,0,134.673,0,202c-44.662,0-89.338,0-134,0c0-9.774-183.712,79.445-183.712,69.668\n' +
				'\tc0-13,0-321.484,0-334.483C-183.712,509.068,0,696.333,0,687.109c7.333,0,14.667,0,22,0c0-164.65,0-329.35,0-494\n' +
				'\tc-0.003-59.117-12.152-149.501,22-176c25.18-19.537,74.324-17.004,119-17c84.991,0,170.008,0,255,0c0,58.328,0,116.672,0,175\n' +
				'\tc-39.33,0-78.671,0-118,0c0.995-32.138,9.456-115.739-28-87c-5.753,23.034-5.488,100.797,5,115c27.073,6.665,153.103,6.642,169-5\n' +
				'\tc4.312-17.909,2-44.745,2-66c0-43.996,0-88.004,0-132c227.977,0.333,456.022,0.667,684,1c0,58.661,0,117.339,0,176\n' +
				'\tc-82.992,0-166.009,0-249,0c-30.905-0.008-94.499-7.082-68,28c15.038,3.631,37.737,2,56,2c34.996,0,70.003,0,105,0\n' +
				'\tc0,95.99,0,192.01,0,288c0,32.795-7.776,91.54,7,112c24.012,5.763,59.413,2,87,2c61.993,0,124.006,0,186,0c0,22.665,0,45.335,0,68\n' +
				'\tc-34.422-0.243-118.375-7.296-138,7c-4.244,17.621-2,44.045-2,65c0,43.329,0,86.671,0,130c-39.996,0-80.004,0-120,0\n' +
				'\tc0.283-30.938,6.845-85.073-7-104c-34.371-8.846-85.556-1.996-124-2c-12.321-0.001-35.53-3.347-44,2\n' +
				'\tc-10.878,6.867-5.601,18.569,0,26c37.827,9.148,102.151,2.203,145,2c-0.283,30.938-6.845,85.073,7,104\n' +
				'\tc27.218,6.698,155.047,6.681,171-5c4.243-17.621,2-44.045,2-65c0-43.329,0-86.671,0-130c34.421,0.243,118.374,7.296,138-7\n' +
				'\tc5.822-23.344,5.583-104.655-5-119c-24.012-5.763-59.413-2-87-2c-61.994,0-124.007,0-186,0c0-123.988,0-248.012,0-372\n' +
				'\tc77.992,0,156.008,0,234,0c29.965,0.008,90.229,8.04,63-28c-36.777-8.898-99.278-2.203-141-2c0-58.661,0-117.339,0-176\n' +
				'\tc27.997,0,56.003,0,84,0c-0.984,32.282-9.707,117.905,28,89c5.964-24.417,2.211-60.96,2-89c47.974-0.349,95.464-2.857,114,26\n' +
				'\tc9.997,15.563,6,50.413,6,75c0,58.994,0,118.006,0,177c-68.993,0-138.007,0-207,0c-27.058,0-66.885-4.656-83,7\n' +
				'\tc-9.329,38.176-2,113.638-2,158c0,22.619-2.352,48.176,7,61c35.759,8.771,96.332,2,137,2c21.175,0,42.206,1.619,54-7\n' +
				'\tc3.358-12.645,6.11-98.307,0-108c-6.83-10.834-18.606-5.668-26,0c-5.686,23.252-2.211,58.167-2,85c-46.662,0-93.338,0-140,0\n' +
				'\tc0-55.994,0-112.006,0-168c94.99-0.333,190.01-0.667,285-1c0,6.064,195.698-115.364,195.698-109.299c0,17.513,0,328.969,0,346.482\n' +
				'\tc0,8.755-195.698-148.938-195.698-140.184c-7.666,0-15.334,0-23,0c0,162.65,0,325.35,0,488c-37.996,0-76.004,0-114,0\n' +
				'\tc0.867-33.857,13.258-144.334-28-113c-6.197,25.014-6.076,125.93,5,141c35.727,8.648,96.404,2.203,137,2\n' +
				'\tc0.943,73.023-65.659,58.006-137,58c-130.987,0-262.013,0-393,0c0.284-30.545,6.63-83.373-7-102c-38.353-9.272-103.588-2.203-147-2\n' +
				'\tc0-55.328,0-110.672,0-166c74.992,0,150.008,0,225,0c29.733,0.008,86.776,7.433,60-28c-20.2-4.897-50.357-2-74-2\n' +
				'\tc-51.995,0-104.005,0-156,0c-27.033,0-66.918-4.676-83,7c-6.242,25.583-2.212,63.752-2,93c-34.976-0.24-122.093-7.496-142,7\n' +
				'\tc-6.103,25-2.212,62.356-2,91c-106.656,0-213.344,0-320,0c-32.261-0.007-117.986-10.397-89,28c29.833,7.193,73.377,2,107,2\n' +
				'\tc72.326,0,144.674,0,217,0c32.968,0,92.422,7.897,113-7c6.103-25,2.211-62.356,2-91c37.996,0,76.004,0,114,0\n' +
				'\tc-0.291,28.971-5.775,76.567,7,94c38.353,9.272,103.588,2.203,147,2c0,24.664,0,49.336,0,74\n' +
				'\tC637.687,981.109,439.313,981.109,241,981.109z', pathLen)
      pathLen += 20
      if (pathLen > totalLen) {
        break
      } else {
        this.pointArr.push({
          x: preMove.x * 1 / 3 * fix,
          y: preMove.y * 1 / 3 * fix
        })
      }
    }
  },
  drawPath: function () {
    var size = cc.director.getWinSize()

    var pathArr = []
    for (var j = 0; j < this.pointArr.length; j++) {
      pathArr.push(cc.p(this.pointArr[j].x, this.pointArr[j].y))
    }
    // 创建draw对象
    this.drawNode = new cc.DrawNode()
    this.drawNode.setPosition(140 * fix, (30 + this.h) * fix)
    // 曲线，参数：点数组，张力，段落，线条宽度，颜色
    this.drawNode.drawCardinalSpline(pathArr, 0, 3000, 1, cc.color(0, 0, 0))
    // 加入Layer层
    this.addChild(this.drawNode, 10)
  },
  dragAction: function () {
    this.listener1 = cc.EventListener.create({
      event: cc.EventListener.TOUCH_ONE_BY_ONE,
      swallowTouches: true,
      onTouchBegan: function (touch, event) {
        var self = this
        var target = event.getCurrentTarget()
        // 获取事件所绑定的 target, 通常是cc.Node及其子类
        // 获取当前触摸点相对于按钮所在的坐标
        var locationInNode = target.convertToNodeSpace(touch.getLocation())// 转换为本地坐标系的坐标
        var s = target.getContentSize()
        var rect = cc.rect(0, 0, target.width, target.height)
        if (cc.rectContainsPoint(rect, locationInNode) && this.agreeMove === 'on') {
          this.scheduleUpdate()
          switch (target.id) {
            case 1002: {
              this.currentdirection = 'up'
              break
            }
            case 1003: {
              this.currentdirection = 'left'

              break
            }
            case 1004: {
              this.currentdirection = 'down'

              break
            }
            case 1005: {
              this.currentdirection = 'right'

              break
            }
            case 1001: {
              this.currentdirection = null
            }
          }
          this.agreeMove = 'off'
          updata.finish_steps++
          return true
        }
        return false
      }.bind(this),
      onTouchEnded: function (touch, event) {
        this.unscheduleUpdate()
        this.agreeMove = 'on'
        var target = event.getCurrentTarget()
        var star = cc.director.getRunningScene().getChildByTag(50)
        // switch (target.id) {
        // 	case 1002: {
        // 		this.currentdirection = 'up'
        // 		break
        // 	}
        // 	case 1003: {
        // 		this.currentdirection = 'left'

        // 		break
        // 	}
        // 	case 1004: {
        // 		this.currentdirection = 'down'

        // 		break
        // 	}
        // 	case 1005: {
        // 		this.currentdirection = 'right'

        // 		break
        // 	}
        // 	case 1001: {
        // 		this.currentdirection = null
        // 	}
        // }
      }.bind(this)

    })
    var len = this.dragArr.length
    for (var i = 0; i < len; i++) {
      cc.eventManager.addListener(this.listener1.clone(), this.dragArr[i])
    }
  }
})
